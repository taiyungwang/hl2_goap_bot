on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
    - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

name: Upload Release Asset
jobs:
  create_release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false    
  build_and_upload_assets:
    needs: create_release  
    name: ${{ matrix.config.name }}
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    strategy:
      matrix: 
        os: [ubuntu-22.04, windows-2019]
    runs-on: ${{ matrix.os }}      
    steps:
      - uses: actions/checkout@v3
        with:
          path: hl2_goap_bot    
      - name: Checkout and Build project 
        uses: ./hl2_goap_bot/.github/actions/build
        with:
          repo-path: hl2_goap_bot
      - name: Create plugin binary directory
        run: mkdir ${{github.workspace}}/hl2_goap_bot/addons/mybot
      - name: Copy Artifact Linux
        if: matrix.os == 'ubuntu-22.04'
        run: cp ${{github.workspace}}/build/hl2_goap_bot/my_bot.so ${{github.workspace}}/hl2_goap_bot/addons/mybot
      - name: Copy Artifact Windows
        if: matrix.os == 'windows-2019'
        run: cp ${{github.workspace}}/build/hl2_goap_bot/Release/my_bot.dll ${{github.workspace}}/hl2_goap_bot/addons/mybot
      - name: Compress Release Assets
        working-directory: ${{github.workspace}}/hl2_goap_bot
        run: tar -acf ${{github.workspace}}/hl2_goap_bot.tgz addons
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ${{github.workspace}}/hl2_goap_bot.tgz
          asset_name: hl2_goap_bot_${{ matrix.os }}.tgz
          asset_content_type: application/zip
